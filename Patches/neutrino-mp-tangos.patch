--- neutrino-mp-tangos.org/acinclude.m4
+++ neutrino-mp-tangos/acinclude.m4
@@ -464,6 +464,14 @@
 			BOXTYPE="duckbox"
 			BOXMODEL="$withval"
 			;;
+		hs7*)
+			BOXTYPE="duckbox"
+			BOXMODEL="$withval"
+			;;
+		dp*)
+			BOXTYPE="duckbox"
+			BOXMODEL="$withval"
+			;;
 		cuberevo*)
 			BOXTYPE="duckbox"
 			BOXMODEL="$withval"
@@ -480,7 +488,7 @@
 	[  --with-boxmodel         valid for coolstream: nevis, apollo
                           valid for dreambox: dm500, dm500plus, dm600pvr, dm56x0, dm7000, dm7020, dm7025
                           valid for ipbox: ip200, ip250, ip350, ip400
-                          valid for duckbox: ufs910, ufs912, ufs913, ufs922, atevio7500, fortis_hdbox, octagon1008, cuberevo, cuberevo_mini2, cuberevo_2000hd, tf7700],
+                          valid for duckbox: ufs910, ufs912, ufs913, ufs922, atevio7500, fortis_hdbox, octagon1008, hs7110, hs7810a, hs7119, hs7819, dp7000, cuberevo, cuberevo_mini2, cuberevo_2000hd, tf7700],
 	[case "${withval}" in
 		nevis|apollo)
 			if test "$BOXTYPE" = "coolstream"; then
@@ -503,7 +511,7 @@
 				AC_MSG_ERROR([unknown model $withval for boxtype $BOXTYPE])
 			fi
 			;;
-		ufs910|ufs912|ufs913|ufs922|atevio7500|fortis_hdbox|octagon1008|cuberevo|cuberevo_mini2|cuberevo_2000hd|tf7700)
+		ufs910|ufs912|ufs913|ufs922|atevio7500|fortis_hdbox|octagon1008|hs7110|hs7810a|hs7119|hs7819|dp7000|cuberevo|cuberevo_mini2|cuberevo_2000hd|tf7700)
 			if test "$BOXTYPE" = "duckbox"; then
 				BOXMODEL="$withval"
 			else
@@ -549,10 +557,18 @@
 AM_CONDITIONAL(BOXMODEL_UFS912,test "$BOXMODEL" = "ufs912")
 AM_CONDITIONAL(BOXMODEL_UFS913,test "$BOXMODEL" = "ufs913")
 AM_CONDITIONAL(BOXMODEL_UFS922,test "$BOXMODEL" = "ufs922")
+
 AM_CONDITIONAL(BOXMODEL_SPARK7162,test "$BOXMODEL" = "spark7162")
+
 AM_CONDITIONAL(BOXMODEL_ATEVIO7500,test "$BOXMODEL" = "atevio7500")
 AM_CONDITIONAL(BOXMODEL_FORTIS_HDBOX,test "$BOXMODEL" = "fortis_hdbox")
 AM_CONDITIONAL(BOXMODEL_OCTAGON1008,test "$BOXMODEL" = "octagon1008")
+AM_CONDITIONAL(BOXMODEL_HS7110,test "$BOXMODEL" = "hs7110")
+AM_CONDITIONAL(BOXMODEL_HS7810A,test "$BOXMODEL" = "hs7810a")
+AM_CONDITIONAL(BOXMODEL_HS7119,test "$BOXMODEL" = "hs7119")
+AM_CONDITIONAL(BOXMODEL_HS7819,test "$BOXMODEL" = "hs7819")
+AM_CONDITIONAL(BOXMODEL_DP7000,test "$BOXMODEL" = "dp7000")
+
 AM_CONDITIONAL(BOXMODEL_CUBEREVO,test "$BOXMODEL" = "cuberevo")
 AM_CONDITIONAL(BOXMODEL_CUBEREVO_MINI2,test "$BOXMODEL" = "cuberevo_mini2")
 AM_CONDITIONAL(BOXMODEL_CUBEREVO_2000HD,test "$BOXMODEL" = "cuberevo_2000hd")
@@ -609,6 +625,16 @@
 	AC_DEFINE(BOXMODEL_FORTIS_HDBOX, 1, [fortis_hdbox])
 elif test "$BOXMODEL" = "octagon1008"; then
 	AC_DEFINE(BOXMODEL_OCTAGON1008, 1, [octagon1008])
+elif test "$BOXMODEL" = "hs7110"; then
+	AC_DEFINE(BOXMODEL_HS7110, 1, [hs7110])
+elif test "$BOXMODEL" = "hs7810a"; then
+	AC_DEFINE(BOXMODEL_HS7810A, 1, [hs7810a])
+elif test "$BOXMODEL" = "hs7119"; then
+	AC_DEFINE(BOXMODEL_HS7119, 1, [hs7119])
+elif test "$BOXMODEL" = "hs7819"; then
+	AC_DEFINE(BOXMODEL_HS7819, 1, [hs7819])
+elif test "$BOXMODEL" = "dp7000"; then
+	AC_DEFINE(BOXMODEL_DP7000, 1, [dp7000])
 elif test "$BOXMODEL" = "cuberevo"; then
 	AC_DEFINE(BOXMODEL_CUBEREVO, 1, [cuberevo])
 elif test "$BOXMODEL" = "cuberevo_mini2"; then
--- neutrino-mp-tangos.org/src/driver/vfd.cpp
+++ neutrino-mp-tangos/src/driver/vfd.cpp
@@ -53,12 +53,15 @@
 
 #if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
 	#define VFDLENGTH 8
-#elif defined (BOXMODEL_FORTIS_HDBOX)
+#elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
 	#define VFDLENGTH 12
-#elif defined (BOXMODEL_ATEVIO7500)
-	#define VFDLENGTH 12
-#elif defined (BOXMODEL_SPARK)
+#elif defined (BOXMODEL_SPARK) \
+   || defined (BOXMODEL_HS7810A) \
+   || defined (BOXMODEL_HS7119) \
+   || defined (BOXMODEL_HS7819)
 	#define VFDLENGTH 4
+#elif defined (BOXMODEL_HS7110)
+	#define VFDLENGTH 0
 #else
 	#define VFDLENGTH 16
 #endif
@@ -116,6 +119,7 @@
 	}
 }
 
+#if defined (BOXMODEL_UFS910) || defined (BOXMODEL_UFS922)
 static void writeCG (unsigned char adress, unsigned char pixeldata[5])
 {
 	struct vfd_ioctl_data data;
@@ -129,12 +133,15 @@
 	write_to_vfd(VFDWRITECGRAM, &data);
 	return;
 }
+#endif
 
 static void ShowNormalText(char * str, bool fromScrollThread = false)
 {
 	int ws = 0; // needed whitespace for centering
+	int len = strlen(str);
 	struct vfd_ioctl_data data;
 
+//	printf("CVFD::ShowNormalText: [%s], length %d, fromScrollThread=%x\n", str, strlen(str), fromScrollThread);
 	if (!fromScrollThread)
 	{
 		if(vfd_scrollText != 0)
@@ -151,26 +158,43 @@
 		return;
 	}
 
-	if (strlen(str)<VFDLENGTH)
-		ws = (VFDLENGTH-strlen(str))/2;
-	else
-		ws = 0;
 	memset(data.data, ' ', 63);
-	if (!fromScrollThread)
+
+	if (strlen(str) < VFDLENGTH && VFDLENGTH > 7) // do not center on small displays
 	{
-		memcpy (data.data+ws, str, VFDLENGTH-ws);
-		data.start = 0;
-		if ((strlen(str) % 2) == 1)
-			data.length = VFDLENGTH-ws-1;
+		ws = (VFDLENGTH-len)/2;
+//		printf("CVFD::ShowNormalText: centering: white space %d chars.\n", ws);
+
+		if (!fromScrollThread)
+		{
+			memcpy (data.data+ws, str, VFDLENGTH-ws);
+			data.start = 0;
+			if ((len % 2) == 1)
+			{
+				data.length = VFDLENGTH-ws-1;
+			}
+			else
+			{
+				data.length = VFDLENGTH-ws;
+			}
+		}
 		else
-			data.length = VFDLENGTH-ws;
+		{
+			memcpy(data.data, str, VFDLENGTH);
+			data.data[VFDLENGTH] = 0;
+			data.start = 0;
+			data.length = VFDLENGTH;
+		}
 	}
 	else
 	{
-		memcpy ( data.data, str, VFDLENGTH);
+//		printf("CVFD::ShowNormalText: no centering");
+		memcpy(data.data, str, len);
+		data.data[len] = 0;
 		data.start = 0;
-		data.length = VFDLENGTH;
-	}
+		data.length = len;
+	}
+//	printf("CVFD::ShowNormalText: VFDDISPLAYCHARS [%s], length %d\n", data.data, data.length);
 	write_to_vfd(VFDDISPLAYCHARS, &data);
 	return;
 }
@@ -185,7 +209,7 @@
 		pthread_join(vfd_scrollText, NULL);
 
 		vfd_scrollText = 0;
-		scrollstr="";
+		scrollstr = (char *)"";
 	}
 
 	//scroll text thread
@@ -199,36 +223,42 @@
 
 	int i;
 	char *str = (char *)arg;
-	int len= strlen(str);
+	int len = strlen(str);
 	char out[VFDLENGTH+1];
+	char buf[VFDLENGTH+65];
 
 	memset(out, 0, VFDLENGTH+1);
 
 	int retries = g_settings.lcd_vfd_scroll;
 
-	while(retries--)
+	if (len > VFDLENGTH)
 	{
-		usleep(SCROLL_TIME);
-
-		for (i=0; i<=(len-VFDLENGTH); i++)
+//		printf("CVFD::ThreadScrollText: [%s], length %d\n", str, len);
+		memset(buf, ' ', (len + VFDLENGTH));
+		memcpy(buf, str, len);
+
+		while(retries--)
 		{
-			// scroll text till end
-			memset(out, ' ', VFDLENGTH);
-			memcpy(out, str+i, VFDLENGTH);
-			ShowNormalText(out,true);
 			usleep(SCROLL_TIME);
+
+			for (i=0; i<=(len-1); i++)
+			{
+				// scroll text until end
+				memcpy(out, buf+i, VFDLENGTH);
+				ShowNormalText(out,true);
+				usleep(SCROLL_TIME);
+			}
 		}
-
-		memcpy(out, str, VFDLENGTH); // display first VFDLENGTH-1 chars after scrolling
-		ShowNormalText(out,true);
-	}
+	}
+	memcpy(out, str, VFDLENGTH); // display first VFDLENGTH chars after scrolling
+	ShowNormalText(out,true);
 
 	pthread_exit(0);
 
 	return NULL;
 }
-
-#endif
+#endif //HAVE_DUCKBOX_HARDWARE
+
 CVFD::CVFD()
 {
 #ifdef VFD_UPDATE
@@ -304,7 +334,7 @@
 }
 
 void CVFD::wake_up() {
- 	if(!has_lcd) return;
+	if(!has_lcd) return;
 	if (atoi(g_settings.lcd_setting_dim_time.c_str()) > 0) {
 		timeout_cnt = atoi(g_settings.lcd_setting_dim_time.c_str());
 		g_settings.lcd_setting_dim_brightness > -1 ?
@@ -315,6 +345,9 @@
 	if(g_settings.lcd_info_line){
 		switch_name_time_cnt = g_settings.timing[SNeutrinoSettings::TIMING_INFOBAR] + 10;
 	}
+#if defined (BOXMODEL_OCTAGON1008)
+	ShowIcon(ICON_COLON2, false);
+#endif
 }
 
 void* CVFD::TimeThread(void *)
@@ -369,12 +402,55 @@
 #else
 // Brightness
 	struct vfd_ioctl_data data;
+  #if !defined (BOXMODEL_HS7810A) \
+   && !defined (BOXMODEL_HS7119) \
+   && !defined (BOXMODEL_HS7819)
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
-	unsigned char setting = brightness;
-	data.start = setting & 0x07;
+	data.start = brightness & 0x07;
 	data.length = 0;
 	write_to_vfd(VFDBRIGHTNESS, &data);
-#if !defined (BOXMODEL_UFS912) && !defined (BOXMODEL_UFS913) && !defined (BOXMODEL_OCTAGON1008)
+  #endif
+  #if defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+	usleep(100000);
+	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+	data.start = 0;
+	data.length = 5;
+	if (power) {
+		data.data[0] = 0x01; // red led
+	}
+	else
+	{
+		data.data[0] = 0xf2; // cross plus blue led
+	}
+	data.start = 0;
+	data.data[4] = 0; // off
+	data.length = 5;
+	write_to_vfd(VFDPWRLED, &data);
+	usleep(100000);
+	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+	data.start = 0;
+	data.length = 5;
+	if (power) {
+		data.data[0] = 0xf2; // cross plus blue led
+	}
+	else
+	{
+		data.data[0] = 0x01; // red led
+	}
+	data.start = 0;
+	data.data[4] = brightness*2;
+	data.length = 5;
+	write_to_vfd(VFDPWRLED, &data);
+   #elif defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7819)
+	memset(&data, 0, sizeof(struct vfd_ioctl_data));
+	data.start = 0;
+	data.data[0] = 0x02; // logo
+	data.data[4] = (brightness & 0x07);
+	data.length = 5;
+	write_to_vfd(VFDPWRLED, &data);
+  #elif !defined (BOXMODEL_UFS912) \
+     && !defined (BOXMODEL_UFS913) \
+     && !defined (BOXMODEL_OCTAGON1008)
 // Power on/off
 	if (power) {
 		data.start = 0x01;
@@ -383,8 +459,8 @@
 	}
 	data.length = 0;
 	write_to_vfd(VFDDISPLAYWRITEONOFF, &data, true);
-#endif
-#endif
+  #endif
+#endif  //HAVE_DUCKBOX_HARDWARE
 }
 
 void CVFD::setlcdparameter(void)
@@ -489,7 +565,7 @@
 	}
 	setled(led1, led2);
 }
-#endif
+#endif //!HAVE_DUCKBOX_HARDWARE
 
 void CVFD::showServicename(const std::string & name) // UTF-8
 {
@@ -532,8 +608,23 @@
 			if(force || ( switch_name_time_cnt == 0 && ((hour != t->tm_hour) || (minute != t->tm_min))) ) {
 				hour = t->tm_hour;
 				minute = t->tm_min;
-				strftime(timestr, 20, "%H:%M", t);
+#if !defined (BOXMODEL_HS7810A) && !defined (BOXMODEL_HS7119) && !defined (BOXMODEL_HS7819)
+  #if defined (BOXMODEL_OCTAGON1008)
+				ShowIcon(ICON_COLON2, true);
+				strftime(timestr, 5, "%H%M", t);
+  #else
+				strftime(timestr, 6, "%H:%M", t);
+  #endif
 				ShowText(timestr);
+#else //HS7810A, HS7119 or HS7819, string should not scroll
+				strftime(timestr, 6, "%H:%M", t);
+				struct vfd_ioctl_data data;
+				memset(data.data, ' ', 6);
+				memcpy (data.data, timestr, 6);
+				data.start = 0;
+				data.length = 5;
+				write_to_vfd(VFDDISPLAYCHARS, &data);
+#endif
 			}
 		}
 	}
@@ -585,10 +676,14 @@
 	}
 }
 #endif
+
 void CVFD::showRCLock(int /*duration*/)
 {
 #ifdef HAVE_DUCKBOX_HARDWARE
-	ShowText("<LOCKED>");
+	if (VFDLENGTH < 8)
+		ShowText("Lock");
+	else
+		ShowText("<LOCKED>");
 #endif
 }
 
@@ -610,10 +705,10 @@
 	if ((mode == MODE_TVRADIO) && g_settings.lcd_setting[SNeutrinoSettings::LCD_SHOW_VOLUME]) {
 #if HAVE_DUCKBOX_HARDWARE
 		int pp = (int) round((double) vol / (double) 2);
-		int i;
 		if(oldpp != pp)
 		{
-#if defined (BOXMODEL_UFS910) || defined (BOXMODEL_UFS922)
+  #if defined (BOXMODEL_UFS910) || defined (BOXMODEL_UFS922)
+			int i;
 			unsigned char speaker[5] = {0x1C, 0x1C, 0x1C, 0x3E, 0x7F}; // speaker symbol
 			writeCG(0, speaker);
 
@@ -655,19 +750,32 @@
 					strncat(VolumeBar, c0, 1);
 			}
 			ShowText(VolumeBar);
-#elif defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
+  #elif defined (BOXMODEL_TF7700)
 			char vol_chr[64] = "";
 			snprintf(vol_chr, sizeof(vol_chr)-1, "VOL: %d%%", (int)vol);
 			ShowText(vol_chr);
-#elif defined (BOXMODEL_SPARK)
+  #elif defined (BOXMODEL_OCTAGON1008)
 			char vol_chr[64] = "";
-			snprintf(vol_chr, sizeof(vol_chr)-1, "%d", (int)vol);
+			snprintf(vol_chr, sizeof(vol_chr)-1, "VOL=%3d", (int)vol);
 			ShowText(vol_chr);
-#elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500) || defined (BOXMODEL_UFS912) || defined (BOXMODEL_UFS913) || defined (BOXMODEL_CUBEREVO) || defined (BOXMODEL_CUBEREVO_MINI2) || defined (BOXMODEL_CUBEREVO_2000HD)
+  #elif defined (BOXMODEL_SPARK) \
+     || defined (BOXMODEL_HS7119) \
+     || defined (BOXMODEL_HS7810A) \
+     || defined (BOXMODEL_HS7819)
+			char vol_chr[64] = "";
+			snprintf(vol_chr, sizeof(vol_chr)-1, "v%3d", (int)vol);
+			ShowText(vol_chr);
+  #elif defined (BOXMODEL_FORTIS_HDBOX) \
+     || defined (BOXMODEL_ATEVIO7500) \
+     || defined (BOXMODEL_UFS912) \
+     || defined (BOXMODEL_UFS913) \
+     || defined (BOXMODEL_CUBEREVO) \
+     || defined (BOXMODEL_CUBEREVO_MINI2) \
+     || defined (BOXMODEL_CUBEREVO_2000HD)
 			char vol_chr[64] = "";
 			snprintf(vol_chr, sizeof(vol_chr)-1, "Volume: %d%%", (int)vol);
 			ShowText(vol_chr);
-#endif
+  #endif
 			oldpp = pp;
 		}
 #else
@@ -881,6 +989,9 @@
 		ShowIcon(FP_ICON_COL1, true);
 		ShowIcon(FP_ICON_COL2, true);
 #endif
+		ClearIcons();
+		ShowIcon(FP_ICON_USB, false);
+		ShowIcon(FP_ICON_HDD, false);
 		showclock = true;
 		showTime(true);      /* "showclock = true;" implies that "showTime();" does a "displayUpdate();" */
 		                 /* "showTime()" clears the whole lcd in MODE_STANDBY                         */
@@ -924,9 +1035,13 @@
 int CVFD::getBrightness()
 {
 	//FIXME for old neutrino.conf
+#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] > 7)
+		g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = 7;
+#else
 	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] > 15)
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS] = 15;
-
+#endif
 	return g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS];
 }
 
@@ -941,8 +1056,13 @@
 int CVFD::getBrightnessStandby()
 {
 	//FIXME for old neutrino.conf
+#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] > 7)
+		g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] = 7;
+#else
 	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] > 15)
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS] = 15;
+#endif
 	return g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS];
 }
 
@@ -957,8 +1077,13 @@
 int CVFD::getBrightnessDeepStandby()
 {
 	//FIXME for old neutrino.conf
+#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
+	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] > 7)
+		g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] = 7;
+#else
 	if(g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] > 15)
 		g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS] = 15;
+#endif
 	return g_settings.lcd_setting[SNeutrinoSettings::LCD_DEEPSTANDBY_BRIGHTNESS];
 }
 
@@ -1023,11 +1148,13 @@
 	else
 		text[0] = 0;
 #else
-#if defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
+#if defined (BOXMODEL_HS7810A) || defined (BOXMODEL_HS7119) || defined (BOXMODEL_HS7819)
+	ShowText("    ");
+#elif defined (BOXMODEL_OCTAGON1008) || defined (BOXMODEL_TF7700)
 	ShowText("        ");
 #elif defined (BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_ATEVIO7500)
 	ShowText("            ");
-#else
+#elif !defined (BOXMODEL_HS7110)
 	ShowText("                ");
 #endif
 #endif
@@ -1042,13 +1169,20 @@
 	if(ret < 0)
 		perror(show ? "IOC_FP_SET_ICON" : "IOC_FP_CLEAR_ICON");
 #else
-#if defined (BOXMODEL_ATEVIO7500)
+#if defined (BOXMODEL_ATEVIO7500) \
+ || defined (BOXMODEL_HS7110) \
+ || defined (BOXMODEL_HS7810A) \
+ || defined (BOXMODEL_HS7119) \
+ || defined (BOXMODEL_HS7819) \
+ || defined (BOXMODEL_SPARK)
 	return;
 #endif
+	if (icon == 0)
+		return;
 	struct vfd_ioctl_data data;
 	memset(&data, 0, sizeof(struct vfd_ioctl_data));
 	data.start = 0x00;
-	data.data[0] = icon & 0x0f;
+	data.data[0] = icon;
 	data.data[4] = show;
 	data.length = 5;
 	write_to_vfd(VFDICONDISPLAYONOFF, &data);
@@ -1059,15 +1193,22 @@
 #ifdef HAVE_DUCKBOX_HARDWARE
 void CVFD::ClearIcons()
 {
-#if defined (BOXMODEL_ATEVIO7500) || defined (BOXMODEL_SPARK)
+  #if defined (BOXMODEL_ATEVIO7500) \
+   || defined (BOXMODEL_HS7110) \
+   || defined (BOXMODEL_HS7810A) \
+   || defined (BOXMODEL_HS7119) \
+   || defined (BOXMODEL_HS7819) \
+   || defined (BOXMODEL_SPARK)
 	return;
-#endif
+  #endif
 	for (int id = 0x10; id < FP_ICON_MAX; id++) {
-#if defined (BOXMODEL_OCTAGON1008) || defined(BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_TF7700)
-		if (id != 0x16)
-#else
+  #if defined (BOXMODEL_OCTAGON1008)
+		if (id != FP_ICON_USB && id != FP_ICON_HDD)
+  #elif defined(BOXMODEL_FORTIS_HDBOX) || defined (BOXMODEL_TF7700)
+		if (id != FP_ICON_USB)
+  #else
 		if (id != 0x10 && id != 0x12)
-#endif
+  #endif
 			ShowIcon((fp_icon)id, false);
 	}
 	return;
@@ -1086,7 +1227,7 @@
 		g_str[63] = '\0';
 		i = 63;
 	}
-	ShowNormalText(g_str);
+	ShowNormalText(g_str,false);
 }
 #else
 void CVFD::ShowText(const char *str)
@@ -1434,5 +1575,3 @@
 }
 /*****************************************************************************************/
 #endif // VFD_UPDATE
-
-
--- neutrino-mp-tangos.org/src/neutrino.cpp
+++ neutrino-mp-tangos/src/neutrino.cpp
@@ -3983,6 +3983,9 @@
 			CVFD::getInstance()->Clear();
 			CVFD::getInstance()->setMode(CVFD::MODE_STANDBY);
 		}
+#if defined (FORTIS_HDBOX)
+		CVFD::getInstance()->setlcdparameter(g_settings.lcd_setting[SNeutrinoSettings::LCD_STANDBY_BRIGHTNESS], 0);
+#endif
 		CVFD::getInstance()->setBacklight(g_settings.backlight_standby);
 
 		InfoClock->enableInfoClock(false);
@@ -4011,6 +4014,9 @@
 		// Active standby off
 		powerManager->SetStandby(false, false);
 		CVFD::getInstance()->setMode(CVFD::MODE_TVRADIO);
+#if defined (FORTIS_HDBOX)
+		CVFD::getInstance()->setlcdparameter(g_settings.lcd_setting[SNeutrinoSettings::LCD_BRIGHTNESS], 1);
+#endif
 		CVFD::getInstance()->ShowText("resume");
 		cpuFreq->SetCpuFreq(g_settings.cpufreq * 1000 * 1000);
 		videoDecoder->Standby(false);
--- neutrino-mp-tangos.org/src/driver/record.cpp
+++ neutrino-mp-tangos/src/driver/record.cpp
@@ -1147,9 +1147,10 @@
 
 	if(inst->Timeshift())
 		autoshift = false;
-
-#ifdef BOXMODEL_SPARK7162
+#if defined(BOXMODEL_SPARK7162)
 		CVFD::getInstance()->SetIcons(SPARK_TIMESHIFT, false);
+#elif defined(BOXMODEL_FORTIS_HDBOX)
+		CVFD::getInstance()->ShowIcon(FP_ICON_TIMESHIFT, false);
 #endif
 	delete inst;
 }
@@ -1287,7 +1288,6 @@
 	return messages_return::unhandled;
 }
 
-
 void CRecordManager::StartTimeshift()
 {
 	if(g_RemoteControl->is_video_started)
@@ -1297,6 +1297,8 @@
 		t_channel_id live_channel_id = CZapit::getInstance()->GetCurrentChannelID();
 #ifdef BOXMODEL_SPARK7162
 		CVFD::getInstance()->SetIcons(SPARK_TIMESHIFT, true);
+#elif defined(BOXMODEL_FORTIS_HDBOX)
+		CVFD::getInstance()->ShowIcon(FP_ICON_TIMESHIFT, true);
 #endif
 		/* start temporary timeshift if enabled and not running, but dont start second record */
 		if (g_settings.temp_timeshift) {
--- neutrino-mp-tangos.org/src/gui/movieplayer.cpp
+++ neutrino-mp-tangos/src/gui/movieplayer.cpp
@@ -381,25 +381,44 @@
 
 	switch (playstate) {
 		case CMoviePlayerGui::PAUSE:
-#if !defined(BOXMODEL_UFS910) && !defined(BOXMODEL_UFS912) && !defined(BOXMODEL_UFS913) && !defined(BOXMODEL_UFS922)
+#if !defined(BOXMODEL_UFS910) \
+ && !defined(BOXMODEL_UFS912) \
+ && !defined(BOXMODEL_UFS913) \
+ && !defined(BOXMODEL_UFS922) \
+ && !defined(BOXMODEL_FORTIS_HDBOX) \
+ && !defined(BOXMODEL_OCTAGON1008) \
+ && !defined(BOXMODEL_HS7110) \
+ && !defined(BOXMODEL_HS7810A) \
+ && !defined(BOXMODEL_HS7119) \
+ && !defined(BOXMODEL_HS7819)
 			lcd = "|| ";
-#else
+ #else
 			lcd = "";
-#endif
+ #endif
 			if (speed < 0) {
 				sprintf(tmp, "%dx<| ", abs(speed));
 				lcd = tmp;
 			} else if (speed > 0) {
 				sprintf(tmp, "%dx|> ", abs(speed));
 				lcd = tmp;
-#if !defined(BOXMODEL_UFS910) && !defined(BOXMODEL_UFS912) && !defined(BOXMODEL_UFS913) && !defined(BOXMODEL_UFS922)
-			} else
+			}
+#if !defined(BOXMODEL_UFS910) \
+ && !defined(BOXMODEL_UFS912) \
+ && !defined(BOXMODEL_UFS913) \
+ && !defined(BOXMODEL_UFS922) \
+ && !defined(BOXMODEL_OCTAGON1008) \
+ && !defined(BOXMODEL_HS7110) \
+ && !defined(BOXMODEL_HS7810A) \
+ && !defined(BOXMODEL_HS7119) \
+ && !defined(BOXMODEL_HS7819)
+			else
 				lcd = "|| ";
-#else
-			} else
+ #else
+			else
 				lcd = "";
-#endif
+ #endif
 			break;
+ #if !defined(BOXMODEL_OCTAGON1008)
 		case CMoviePlayerGui::REW:
 			sprintf(tmp, "%dx<< ", abs(speed));
 			lcd = tmp;
@@ -408,10 +427,21 @@
 			sprintf(tmp, "%dx>> ", abs(speed));
 			lcd = tmp;
 			break;
+ #endif
 		case CMoviePlayerGui::PLAY:
-#if !defined(BOXMODEL_UFS910) && !defined(BOXMODEL_UFS912) && !defined(BOXMODEL_UFS913) && !defined(BOXMODEL_UFS922) && !defined(BOXMODEL_CUBEREVO_MINI2)
+#if !defined(BOXMODEL_UFS910) \
+ && !defined(BOXMODEL_UFS912) \
+ && !defined(BOXMODEL_UFS913) \
+ && !defined(BOXMODEL_UFS922) \
+ && !defined(BOXMODEL_FORTIS_HDBOX) \
+ && !defined(BOXMODEL_OCTAGON1008) \
+ && !defined(BOXMODEL_HS7110) \
+ && !defined(BOXMODEL_HS7810A) \
+ && !defined(BOXMODEL_HS7119) \
+ && !defined(BOXMODEL_HS7819) \
+ && !defined(BOXMODEL_CUBEREVO_MINI2)
 			lcd = "> ";
-#endif
+ #endif
 			break;
 		default:
 			break;
--- neutrino-mp-tangos.org/src/gui/vfd_setup.cpp
+++ neutrino-mp-tangos/src/gui/vfd_setup.cpp
@@ -195,20 +195,60 @@
 	brightnessstandby = CVFD::getInstance()->getBrightnessStandby();
 	brightnessdeepstandby = CVFD::getInstance()->getBrightnessDeepStandby();
 
-	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESS, &brightness, true, 0, 15, this, 0, 0, NONEXISTANT_LOCALE, true);
+#if defined(BOXMODEL_FORTIS_HDBOX) \
+ || defined(BOXMODEL_OCTAGON1008) \
+ || defined(BOXMODEL_ATEVIO7500) \
+ || defined(BOXMODEL_HS7110) \
+ || defined(BOXMODEL_HS7810A) \
+ || defined(BOXMODEL_HS7119) \
+ || defined(BOXMODEL_HS7819)
+ 	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESS, &brightness, true, 0, 7, this, 0, 0, NONEXISTANT_LOCALE, true);
+#else
+ 	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESS, &brightness, true, 0, 15, this, 0, 0, NONEXISTANT_LOCALE, true);
+#endif
 	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESS);
 	mn_widget->addItem(nc);
 
+#if defined(BOXMODEL_FORTIS_HDBOX) \
+ || defined(BOXMODEL_OCTAGON1008) \
+ || defined(BOXMODEL_ATEVIO7500) \
+ || defined(BOXMODEL_HS7110) \
+ || defined(BOXMODEL_HS7810A) \
+ || defined(BOXMODEL_HS7119) \
+ || defined(BOXMODEL_HS7819)
+	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSSTANDBY, &brightnessstandby, true, 0, 7, this, 0, 0, NONEXISTANT_LOCALE, true);
+#else
 	nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSSTANDBY, &brightnessstandby, true, 0, 15, this, 0, 0, NONEXISTANT_LOCALE, true);
+#endif
 	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESSSTANDBY);
 	mn_widget->addItem(nc);
 
 	if(cs_get_revision() > 7) {
+#if defined(BOXMODEL_FORTIS_HDBOX) \
+ || defined(BOXMODEL_OCTAGON1008) \
+ || defined(BOXMODEL_ATEVIO7500) \
+ || defined(BOXMODEL_HS7110) \
+ || defined(BOXMODEL_HS7810A) \
+ || defined(BOXMODEL_HS7119) \
+ || defined(BOXMODEL_HS7819)
+		nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSDEEPSTANDBY, &brightnessdeepstandby, true, 0, 7, this, 0, 0, NONEXISTANT_LOCALE, true);
+#else
 		nc = new CMenuOptionNumberChooser(LOCALE_LCDCONTROLER_BRIGHTNESSDEEPSTANDBY, &brightnessdeepstandby, true, 0, 15, this, 0, 0, NONEXISTANT_LOCALE, true);
+#endif
 		nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESSDEEPSTANDBY);
 		mn_widget->addItem(nc);
 	}
+#if defined(BOXMODEL_FORTIS_HDBOX) \
+ || defined(BOXMODEL_OCTAGON1008) \
+ || defined(BOXMODEL_ATEVIO7500) \
+ || defined(BOXMODEL_HS7110) \
+ || defined(BOXMODEL_HS7810A) \
+ || defined(BOXMODEL_HS7119) \
+ || defined(BOXMODEL_HS7819)
+	nc = new CMenuOptionNumberChooser(LOCALE_LCDMENU_DIM_BRIGHTNESS, &g_settings.lcd_setting_dim_brightness, vfd_enabled, -1, 7, NULL, 0, -1, LOCALE_OPTIONS_OFF, true);
+#else
 	nc = new CMenuOptionNumberChooser(LOCALE_LCDMENU_DIM_BRIGHTNESS, &g_settings.lcd_setting_dim_brightness, vfd_enabled, -1, 15, NULL, 0, -1, LOCALE_OPTIONS_OFF, true);
+#endif
 	nc->setHint("", LOCALE_MENU_HINT_VFD_BRIGHTNESSDIM);
 	mn_widget->addItem(nc);
 

